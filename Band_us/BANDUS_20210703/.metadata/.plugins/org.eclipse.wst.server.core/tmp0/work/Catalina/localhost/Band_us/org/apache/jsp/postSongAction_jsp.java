/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2021-07-03 03:56:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import song.SongDAO;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;
import java.io.*;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

public final class postSongAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("org.apache.commons.fileupload.disk.DiskFileItemFactory");
    _jspx_imports_classes.add("song.SongDAO");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("org.apache.commons.fileupload.servlet.ServletFileUpload");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");

	request.setCharacterEncoding("UTF-8");

      out.write('\r');
      out.write('\n');
      song.Song song = null;
      song = (song.Song) _jspx_page_context.getAttribute("song", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (song == null){
        song = new song.Song();
        _jspx_page_context.setAttribute("song", song, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("song"), "song_name", request.getParameter("song_name"), request, "song_name", false);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("song"), "artist_name", request.getParameter("artist_name"), request, "artist_name", false);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("song"), "album_name", request.getParameter("album_name"), request, "album_name", false);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("song"), "song_comment", request.getParameter("song_comment"), request, "song_comment", false);
      out.write("\r\n");
      out.write("<!doctype html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("\r\n");
      out.write("<title>음악의 시작, Band us</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");

		String userID = null;
		
		SongDAO songDAO = new SongDAO();

					
		

		// 파일 업로드 단계 //////////////////////////////////////////////////////////////////////////////////////////
		// 1. multipart/form-data 여부 확인
		boolean isMultipart = ServletFileUpload.isMultipartContent(request);
		if (isMultipart) {//true가 되면 실행한다.
			// 2. 메모리나 파일로 업로드 데이터를 보관하는 FileItem의 Factory 설정
			DiskFileItemFactory factory = new DiskFileItemFactory(); //파라미터를 파일 아이템 객체로 만듬 파일이름, 파일12 모두 3개를 모두

			// 3. 업로드 요청을 처리하는 ServletFileUpload 생성
			ServletFileUpload upload = new ServletFileUpload(factory); //파일 업로드를 할 수 있는 객체를 가지고 있음.

			// 4. 업로드 요청 파싱해서 FileItem 목록 구함
			List<FileItem> items = upload.parseRequest(request); //요청정보로 전달된 파라미터를 전달함 
			//파일은 -임시 메모리에 저장함 // 모든 파라미터는 파일 아이템객체로 바뀐다 / 그것들을 모아 리스트 객체로 바꿈
			//파일아이템객체가 3개가 만들어 진다 "text1"  "file1"  "file2"     list로 만들어 놓음
			//임시메모리에 올라갔으니 끄면 다 사라짐 -> 내가 원하는 경로에 옮겨놓고싶다
			int i=0;
			//FileItem : 
			Iterator<FileItem> iter = items.iterator();
			while (iter.hasNext()) {
				FileItem item = iter.next();

				// 5. FileItem이 폼 입력 항목인지 여부에 따라 알맞은 처리
				//일반-true / 파일 - false
				if (item.isFormField()) {
					
					if(i==0){
						song.setSong_name(item.getString("utf-8"));
						i++;
						System.out.println("Action song_name : " + song.getSong_name());
					}
					if(i==1){
						song.setArtist_name(item.getString("utf-8"));
						i++;
						System.out.println("Action artist_name : " + song.getArtist_name());
					}
					if(i==2){
						song.setAlbum_name(item.getString("utf-8"));
						i++;
						System.out.println("Action album_name : " + song.getAlbum_name());
					}
					if(i==3){
						song.setSong_comment(item.getString("utf-8"));
						i++;
						System.out.println("Action song_comment : " + song.getSong_comment());
					}
					

				}
			String downloadpath = songDAO.post(song.getSong_name(), song.getArtist_name(), song.getAlbum_name(),
						song.getSong_comment());
			while (iter.hasNext()) {
			if(!item.isFormField()) {
					String name = item.getFieldName(); //파라미터이름
					String fileName = item.getName(); //원본 파일명
					String contentType = item.getContentType(); //파일타입
					boolean isInMemory = item.isInMemory(); // 기준용량보다 넘으면 내가 원하는 아니면 jvm에 임시메모리에 올려놓아라 어디에 올려놓을거니
					long sizeInBytes = item.getSize(); //크기가 얼마인지

					int lastIndex = fileName.lastIndexOf("\\");
					String real = fileName.substring(lastIndex + 1);

					// path 꼭 받을것
					System.out.println(downloadpath + real);
					File file = new File(downloadpath + real);
					item.write(file);
				}
			}
			}
		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");

	if (song.getSong_name() == null || song.getArtist_name()==null || song.getAlbum_name()==null ) {

		PrintWriter script = response.getWriter();
		script.println("<script>");
		script.println("alert('양식을 전부 입력해주세요.')");
		script.println("history.back()");
		script.println("</script>");
	} else {
			PrintWriter script = response.getWriter();
			script.println("<script>");
			script.println("alert('노래 등록이 완료되었습니다.')");
			script.println("location.href = 'home.jsp'");
			script.println("</script>");
		}

	
	
	
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
